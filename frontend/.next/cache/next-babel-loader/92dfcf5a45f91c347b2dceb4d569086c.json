{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios';\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {\n  // 서버에 요청 보내는 부분\n  return axios.post('/login');\n}\n\nfunction* login() {\n  try {\n    // yield fork(logger);    // 로그 기록하는 기능 예제\n    // yield call(loginAPI);       // call 동기 호출\n    yield delay(2000);\n    yield put({\n      // put 은 dispatch 와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  while (true) {\n    yield take(LOG_IN_REQUEST, login); // take 안에 gernerater.next() 기능이 있음\n\n    yield put({\n      // put 은 redux 에 dispatch 와 동일\n      type: LOG_IN_SUCCESS\n    });\n  }\n}\n\nfunction signUpAPI() {\n  // 서버에 요청 보내는 부분\n  return axios.post('/signUp');\n}\n\nfunction* signUp() {\n  try {\n    // yield fork(logger);    // 로그 기록하는 기능 예제\n    //yield call(signUpAPI);       // call 동기 호출\n    yield delay(2000);\n    throw new Error('에러 발생');\n    yield put({\n      // put 은 dispatch 와 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* helloSaga() {\n  //yield take(HELLO_SAGA);\n  //yield takeLatest(HELLO_SAGA, hello);\n  console.log(\"Before Saga\");\n\n  while (true) {\n    yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n  }\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, function* () {\n    yield delay(1000);\n    yield put({\n      type: 'BYE_SAGA'\n    });\n  });\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), // 이벤트 리스너로 이해, 순서 의미 없음\n  fork(watchSignUp) // call()   // 동기 호출\n  // fork()   // 비동기 호출\n  // watchHello(),\n  // //helloSaga(),\n  // watchLogin(),\n  // watchSignup(),\n  ]);\n} // function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }","map":{"version":3,"sources":["/Users/mac/work/feelming/frontend/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","HELLO_SAGA","loginAPI","post","login","type","e","console","error","watchLogin","signUpAPI","signUp","Error","watchSignUp","helloSaga","log","watchHello","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAA0E,oBAA1E;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB;AACpB;AACI,SAAOF,KAAK,CAACG,IAAN,CAAW,QAAX,CAAP;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA;AACA;AACA,UAAMX,KAAK,CAAE,IAAF,CAAX;AACA,UAAMF,GAAG,CAAE;AAAa;AACpBc,MAAAA,IAAI,EAAEV;AADC,KAAF,CAAT;AAGH,GAPD,CAOE,OAAOW,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMf,GAAG,CAAE;AACPc,MAAAA,IAAI,EAAET,cADC;AAEPY,MAAAA,KAAK,EAAEF;AAFA,KAAF,CAAT;AAIH;AACJ;;AAED,UAAUG,UAAV,GAAuB;AACnB,SAAM,IAAN,EAAW;AACP,UAAMjB,IAAI,CAACE,cAAD,EAAiBU,KAAjB,CAAV,CADO,CAC8B;;AACrC,UAAMb,GAAG,CAAE;AAAa;AACpBc,MAAAA,IAAI,EAAEV;AADC,KAAF,CAAT;AAGH;AACJ;;AAED,SAASe,SAAT,GAAqB;AACjB;AACA,SAAOV,KAAK,CAACG,IAAN,CAAW,SAAX,CAAP;AACH;;AAED,UAAUQ,MAAV,GAAmB;AACf,MAAI;AACA;AACA;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAM,IAAImB,KAAJ,CAAU,OAAV,CAAN;AAEA,UAAMrB,GAAG,CAAE;AAAa;AACpBc,MAAAA,IAAI,EAAEP;AADC,KAAF,CAAT;AAGH,GATD,CASE,OAAOQ,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMf,GAAG,CAAE;AACPc,MAAAA,IAAI,EAAEN;AADC,KAAF,CAAT;AAGH;AACJ;;AAED,UAAUc,WAAV,GAAwB;AACpB,QAAMxB,SAAS,CAACQ,eAAD,EAAkBc,MAAlB,CAAf;AACH;;AAED,UAAUG,SAAV,GAAsB;AAClB;AACA;AACAP,EAAAA,OAAO,CAACQ,GAAR,CAAY,aAAZ;;AACA,SAAM,IAAN,EAAY;AACR,UAAMvB,IAAI,CAACS,UAAD,CAAV;AACJM,IAAAA,OAAO,CAACQ,GAAR,CAAY,YAAZ;AACC;AACJ;;AAED,UAAUC,UAAV,GAAuB;AACnB,QAAM5B,UAAU,CAACa,UAAD,EAAa,aAAY;AACrC,UAAMR,KAAK,CAAE,IAAF,CAAX;AACA,UAAMF,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGH,GALe,CAAhB;AAMH;;AAED,eAAe,UAAUY,QAAV,GAAqB;AAChC,QAAM/B,GAAG,CAAC,CACNC,IAAI,CAACsB,UAAD,CADE,EACkB;AACxBtB,EAAAA,IAAI,CAAC0B,WAAD,CAFE,CAGN;AACA;AACA;AACA;AACA;AACA;AARM,GAAD,CAAT;AAUH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay, } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'\nimport axios from 'axios';\n\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {\n// 서버에 요청 보내는 부분\n    return axios.post('/login');\n}\n\nfunction* login() {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        // yield call(loginAPI);       // call 동기 호출\n        yield delay( 2000);\n        yield put( {            // put 은 dispatch 와 동일\n            type: LOG_IN_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: LOG_IN_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogin() {\n    while(true){\n        yield take(LOG_IN_REQUEST, login)    // take 안에 gernerater.next() 기능이 있음\n        yield put( {            // put 은 redux 에 dispatch 와 동일\n            type: LOG_IN_SUCCESS,\n        });\n    }\n}\n\nfunction signUpAPI() {\n    // 서버에 요청 보내는 부분\n    return axios.post('/signUp');\n}\n\nfunction* signUp() {\n    try {\n        // yield fork(logger);    // 로그 기록하는 기능 예제\n        //yield call(signUpAPI);       // call 동기 호출\n        yield delay(2000);\n        throw new Error('에러 발생');\n\n        yield put( {            // put 은 dispatch 와 동일\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put( {\n            type: SIGN_UP_FAILURE,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* helloSaga() {\n    //yield take(HELLO_SAGA);\n    //yield takeLatest(HELLO_SAGA, hello);\n    console.log(\"Before Saga\");\n    while(true) {\n        yield take(HELLO_SAGA);\n    console.log(\"Hello Saga\");\n    }\n}\n\nfunction* watchHello() {\n    yield takeLatest(HELLO_SAGA, function*() {\n        yield delay( 1000 );\n        yield put({\n            type: 'BYE_SAGA'\n        });\n    });\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),       // 이벤트 리스너로 이해, 순서 의미 없음\n        fork(watchSignUp),\n        // call()   // 동기 호출\n        // fork()   // 비동기 호출\n        // watchHello(),\n        // //helloSaga(),\n        // watchLogin(),\n        // watchSignup(),\n    ]);\n}\n\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     })\n// }\n\n// function* watchHello() {\n//     console.log(\"Before Saga\");\n//     while(true) {\n//         yield take(HELLO_SAGA);\n//     console.log(\"Hello Saga\");\n//     }\n// }"]},"metadata":{},"sourceType":"module"}